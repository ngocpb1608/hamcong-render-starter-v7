export const pad = (n:number)=>String(n).padStart(2,'0');
export const toYMD = (d:Date)=>`${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`;
export function parseDateFlex(v:any):Date|null{ if(v==null||v==='') return null; const t=String(v).trim(); if(/^\d{4}-\d{2}-\d{2}$/.test(t)){ const [y,m,d]=t.split('-').map(Number); return new Date(y,m-1,d);} if(/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(t)){ const [d,m,y]=t.split('/').map(Number); return new Date(y,m-1,d);} if(/^\d+$/.test(t)){ const serial=parseInt(t,10); const epoch=new Date(Date.UTC(1899,11,30)); const ms=serial*86400000; return new Date(epoch.getTime()+ms);} const d=new Date(t); return isNaN(d as any)? null: d; }
export function parseTimeFlex(v:any):number|null{ if(v==null||v==='') return null; const t=String(v).trim(); if(/^\d{1,2}:\d{2}(:\d{2})?$/.test(t)){ const [hh,mm]=t.split(':').map(Number); return hh*60+mm;} const n=Number(t); if(!isNaN(n)&&n>=0&&n<1) return Math.round(n*24*60); return null; }
export function mapColumns(r:any){ const code=r.code||r.employee||r.employee_code||r['Mã NV']||r['ma_nv']||r['MaNV']; const date=r.date||r.ngay||r['Ngày']||r['date']; const tin=r.in||r.checkin||r['Giờ vào']||r['time_in']||r['IN']; const tout=r.out||r.checkout||r['Giờ ra']||r['time_out']||r['OUT']; return { code, date, tin, tout }; }