import express from 'express'; import bcrypt from 'bcryptjs'; import jwt from 'jsonwebtoken'; import { PrismaClient, UserRole } from '@prisma/client'; import crypto from 'crypto'; import nodemailer from 'nodemailer';
const prisma = new PrismaClient(); export const auth = express.Router();
function sign(user:any){ return jwt.sign({ uid:user.id, ws:user.workspaceId, role:user.role, email:user.email }, process.env.JWT_SECRET!, { expiresIn:'7d' }); }
auth.post('/bootstrap', async (req,res)=>{ const {workspaceSlug,workspaceName,adminEmail,adminPassword}=req.body; if(!workspaceSlug||!adminEmail||!adminPassword) return res.status(400).json({error:'Missing fields'}); const ws=await prisma.workspace.upsert({ where:{slug:workspaceSlug}, update:{name:workspaceName||workspaceSlug}, create:{slug:workspaceSlug,name:workspaceName||workspaceSlug} }); const hash=await bcrypt.hash(adminPassword,10); const user=await prisma.user.upsert({ where:{email:adminEmail}, update:{passwordHash:hash,workspaceId:ws.id,role:'ADMIN'}, create:{email:adminEmail,passwordHash:hash,workspaceId:ws.id,role:UserRole.ADMIN} }); return res.json({ ok:true, workspace:ws.slug, admin:user.email }); });
auth.post('/login', async (req,res)=>{ const {email,password}=req.body; const u=await prisma.user.findUnique({where:{email}}); if(!u||!u.isActive) return res.status(401).json({error:'Sai tài khoản hoặc bị khoá'}); const ok=await bcrypt.compare(password,u.passwordHash); if(!ok) return res.status(401).json({error:'Sai mật khẩu'}); return res.json({ token:sign(u), workspaceId:u.workspaceId, role:u.role, email:u.email }); });
auth.post('/change-password', async (req:any,res)=>{ const {oldPassword,newPassword}=req.body; const h=req.headers.authorization||''; const t=h.startsWith('Bearer ')?h.slice(7):''; if(!t) return res.status(401).json({error:'Unauthorized'}); let p:any; try{p=jwt.verify(t,process.env.JWT_SECRET!)}catch{return res.status(401).json({error:'Invalid token'})}; const u=await prisma.user.findUnique({where:{id:p.uid}}); if(!u) return res.status(404).json({error:'Not found'}); const ok=await bcrypt.compare(oldPassword,u.passwordHash); if(!ok) return res.status(400).json({error:'Mật khẩu cũ không đúng'}); const hash=await bcrypt.hash(newPassword,10); await prisma.user.update({where:{id:u.id},data:{passwordHash:hash}}); return res.json({ok:true}); });
auth.post('/forgot', async (req,res)=>{ const {email}=req.body; const u=await prisma.user.findUnique({where:{email}}); if(!u) return res.json({ok:true}); const token=crypto.randomBytes(24).toString('hex'); const expiresAt=new Date(Date.now()+1000*60*30); await prisma.passwordReset.create({data:{userId:u.id,token,expiresAt}}); const resetLink=`${process.env.PUBLIC_BASE_URL||'http://localhost:3000'}/reset-password?token=${token}`; try{ if(process.env.SMTP_URL){ const tr=nodemailer.createTransport(process.env.SMTP_URL); await tr.sendMail({from:process.env.SMTP_FROM||'no-reply@payroll',to:email,subject:'Reset mật khẩu',text:`Reset: ${resetLink}`}); } }catch{} return res.json({ok:true, resetLink}); });
auth.post('/reset', async (req,res)=>{ const {token,newPassword}=req.body; const pr=await prisma.passwordReset.findUnique({where:{token}}); if(!pr||pr.usedAt||pr.expiresAt<new Date()) return res.status(400).json({error:'Token không hợp lệ/đã hết hạn'}); const hash=await bcrypt.hash(newPassword,10); await prisma.user.update({where:{id:pr.userId},data:{passwordHash:hash}}); await prisma.passwordReset.update({where:{id:pr.id},data:{usedAt:new Date()}}); return res.json({ok:true}); });