import express from 'express'; import multer from 'multer'; import * as XLSX from 'xlsx'; import { PrismaClient } from '@prisma/client'; import { requireAuth } from '../middleware/requireAuth.js'; import { mapColumns, parseDateFlex, parseTimeFlex } from '../utils/xlsx.js';
const prisma = new PrismaClient(); export const timesheets = express.Router(); const upload=multer({storage:multer.memoryStorage(), limits:{fileSize:15*1024*1024}}); timesheets.use(requireAuth);
timesheets.post('/import', upload.single('file'), async (req:any,res)=>{ const ws=req.user.ws; if(!req.file) return res.status(400).json({error:'Thiáº¿u file'}); const wb=XLSX.read(req.file.buffer,{type:'buffer'}); const wsName=wb.SheetNames[0]; const ws0=wb.Sheets[wsName]; const rows=XLSX.utils.sheet_to_json<any>(ws0,{defval:''}); let tCount=0; for (const r0 of rows){ const {code,date,tin,tout}=mapColumns(r0); if(!code) continue; const d=parseDateFlex(date); if(!d) continue; const emp=await prisma.employee.upsert({ where:{workspaceId_code:{workspaceId:ws, code}}, update:{}, create:{workspaceId:ws, code, name:code, status:'ACTIVE'}}); const timeInMin=parseTimeFlex(tin); const timeOutMin=parseTimeFlex(tout); await prisma.timesheet.create({data:{employeeId:emp.id, date:d, timeInMin, timeOutMin, rawIn:String(tin??''), rawOut:String(tout??''), sourceRow:r0}}); tCount++; } res.json({ok:true, timesheets:tCount}); });
timesheets.get('/', async (req:any,res)=>{ const ws=req.user.ws; const month=String(req.query.month||''); const start=month? new Date(`${month}-01T00:00:00Z`): new Date('1970-01-01'); const end=month? new Date(new Date(`${month}-01T00:00:00Z`).getFullYear(), new Date(`${month}-01T00:00:00Z`).getMonth()+1,1): new Date('3000-01-01'); const data=await prisma.timesheet.findMany({ where:{ employee:{workspaceId:ws}, date:{gte:start, lt:end}}, include:{employee:true}, orderBy:{date:'asc'} }); res.json(data.map(t=>({ code:t.employee.code, name:t.employee.name, date:t.date, inMin:t.timeInMin, outMin:t.timeOutMin, rawIn:t.rawIn, rawOut:t.rawOut }))); });