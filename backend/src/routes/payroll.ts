import express from 'express'; import { PrismaClient } from '@prisma/client'; import { requireAuth } from '../middleware/requireAuth.js'; import { toYMD } from '../utils/xlsx.js'; import PDFDocument from 'pdfkit'; import fetch from 'node-fetch';
const prisma = new PrismaClient(); export const payroll = express.Router(); payroll.use(requireAuth);
function hoursFrom(i:number|null,o:number|null){ if(i==null||o==null) return 0; let d=o-i; if(d<0) d+=24*60; return Math.max(0,d)/60; }
payroll.post('/calc', async (req:any,res)=>{ const ws=req.user.ws; const {month, holidays=[], holidayMult=3, overrides={}}=req.body||{}; if(!month) return res.status(400).json({error:'Thiếu month'}); const start=new Date(`${month}-01T00:00:00Z`); const end=new Date(start.getFullYear(), start.getMonth()+1, 1); const hol=new Set<string>(holidays); const emps=await prisma.employee.findMany({where:{workspaceId:ws, status:'ACTIVE'}}); const times=await prisma.timesheet.findMany({ where:{ employee:{workspaceId:ws}, date:{gte:start, lt:end}}, include:{employee:true}, orderBy:{date:'asc'}}); const agg:Record<string,{reg:number;hol:number}>={}; for(const t of times){ const code=t.employee.code; const hrs=hoursFrom(t.timeInMin,t.timeOutMin); if(hrs<=0) continue; const ymd=toYMD(t.date); const cur=agg[code]||{reg:0,hol:0}; if(hol.has(ymd)) cur.hol+=hrs; else cur.reg+=hrs; agg[code]=cur; } const results:any[]=[]; for(const emp of emps){ const a=agg[emp.code]||{reg:0,hol:0}; const o=overrides[emp.code]||{}; const hourly=+o.hourly||0, meal=+o.meal||0, bonus=+o.bonus||0, responsibility=+o.responsibility||0, penalty=+o.penalty||0, advance=+o.advance||0; const regular=a.reg*hourly; const holPay=a.hol*hourly*+holidayMult; const total=regular+holPay+meal+bonus+responsibility-penalty-advance; const saved=await prisma.payroll.upsert({ where:{workspaceId_employeeId_month:{workspaceId:ws, employeeId:emp.id, month}}, update:{hourly,meal,bonus,responsibility,penalty,advance,holidayMult:+holidayMult, regHours:a.reg, holHours:a.hol, total}, create:{workspaceId:ws, employeeId:emp.id, month, hourly, meal, bonus, responsibility, penalty, advance, holidayMult:+holidayMult, regHours:a.reg, holHours:a.hol, total}}); results.push({ code:emp.code, name:emp.name, ...saved }); } res.json({ ok:true, month, count:results.length, results }); });
payroll.get('/', async (req:any,res)=>{ const ws=req.user.ws; const month=String(req.query.month||''); const items=await prisma.payroll.findMany({ where:{workspaceId:ws, month}, include:{employee:true}, orderBy:{employee:{code:'asc'}}}); res.json(items.map(p=>({ code:p.employee.code, name:p.employee.name, month:p.month, hourly:p.hourly, regHours:p.regHours, holHours:p.holHours, holidayMult:p.holidayMult, meal:p.meal, bonus:p.bonus, responsibility:p.responsibility, penalty:p.penalty, advance:p.advance, total:p.total }))); });
payroll.get('/print/:code', async (req:any,res)=>{ const ws=req.user.ws; const {code}=req.params; const month=String(req.query.month||''); const logo=String(req.query.logo||process.env.APP_LOGO_URL||''); const emp=await prisma.employee.findFirst({where:{workspaceId:ws, code}}); if(!emp) return res.status(404).send('Không tìm thấy nhân viên'); const p=await prisma.payroll.findFirst({where:{workspaceId:ws, employeeId:emp.id, month}}); const list=await prisma.timesheet.findMany({where:{employeeId:emp.id, date:{gte:new Date(`${month}-01T00:00:00Z`), lt:new Date(new Date(`${month}-01T00:00:00Z`).getFullYear(), new Date(`${month}-01T00:00:00Z`).getMonth()+1,1)}}, orderBy:{date:'asc'}}); const tr=list.map(t=>`<tr><td>${toYMD(t.date)}</td><td>${t.rawIn||''}</td><td>${t.rawOut||''}</td><td style="text-align:right">${(hoursFrom(t.timeInMin,t.timeOutMin)||0).toFixed(2)}</td></tr>`).join(''); const html=`<!doctype html><html><head><meta charset="utf-8"/><style>@page{size:A4;margin:12mm}body{font-family:Arial}header{display:flex;gap:10px;align-items:center}.logo{height:28px;object-fit:contain}table{border-collapse:collapse;width:100%}th,td{border:1px solid #e5e7eb;padding:6px;font-size:12px}th{background:#f9fafb}</style></head><body><header>${logo?`<img class="logo" src="${logo}"/>`:''}<div><h3>Phiếu lương – ${month}</h3><div>Mã NV: <b>${code}</b> • Tên: <b>${emp.name}</b></div></div></header><table><thead><tr><th>Ngày</th><th>Giờ vào</th><th>Giờ ra</th><th>Giờ</th></tr></thead><tbody>${tr||'<tr><td colspan=4>Không có dữ liệu</td></tr>'}</tbody></table>${p?`<p><b>Tổng giờ thường:</b> ${p.regHours.toFixed(2)} • <b>Tổng giờ lễ:</b> ${p.holHours.toFixed(2)}</p><p><b>Lương/giờ:</b> ${p.hourly.toLocaleString('vi-VN')} • <b>Hệ số lễ:</b> ${p.holidayMult}</p><p>Ăn: ${p.meal.toLocaleString('vi-VN')} • Thưởng: ${p.bonus.toLocaleString('vi-VN')} • Trách nhiệm: ${p.responsibility.toLocaleString('vi-VN')} • Phạt: -${p.penalty.toLocaleString('vi-VN')} • Tạm ứng: -${p.advance.toLocaleString('vi-VN')}</p><h4>Tổng lương: ${p.total.toLocaleString('vi-VN')} đ</h4>`:'<p>Chưa tính payroll cho tháng này.</p>'}<script>window.onload=()=>window.print()</script></body></html>`; res.setHeader('Content-Type','text/html; charset=utf-8'); res.send(html); });
async function drawLogo(doc:any,url?:string){ try{ const logoUrl=url||process.env.APP_LOGO_URL||''; if(!logoUrl) return; const r=await fetch(logoUrl); if(!r.ok) return; const buf=Buffer.from(await r.arrayBuffer()); doc.image(buf,40,40,{width:100}); }catch{} }
function header(doc:any,title:string){ doc.fontSize(16).font('Helvetica-Bold').text(title,160,40); doc.moveTo(40,80).lineTo(555,80).strokeColor('#e5e7eb').stroke(); }
function tableHeader(doc:any,y:number){ doc.fontSize(10).fillColor('#111827').font('Helvetica-Bold'); doc.text('Ngày',40,y); doc.text('Giờ vào',150,y); doc.text('Giờ ra',260,y); doc.text('Giờ',500,y,{width:50,align:'right'}); doc.moveTo(40,y+14).lineTo(555,y+14).strokeColor('#e5e7eb').stroke(); }
function row(doc:any,y:number,d:string,i:string,o:string,hrs:string){ doc.fontSize(10).font('Helvetica').fillColor('#111827'); doc.text(d,40,y); doc.text(i,150,y); doc.text(o,260,y); doc.text(hrs,500,y,{width:50,align:'right'}); }
payroll.get('/pdf/:code', async (req:any,res)=>{ const ws=req.user.ws; const {code}=req.params; const month=String(req.query.month||''); const logo=String(req.query.logo||process.env.APP_LOGO_URL||''); const emp=await prisma.employee.findFirst({where:{workspaceId:ws, code}}); if(!emp) return res.status(404).send('Không tìm thấy nhân viên'); const start=new Date(`${month}-01T00:00:00Z`); const end=new Date(start.getFullYear(), start.getMonth()+1, 1); const p=await prisma.payroll.findFirst({where:{workspaceId:ws, employeeId:emp.id, month}}); const list=await prisma.timesheet.findMany({where:{employeeId:emp.id, date:{gte:start, lt:end}}, orderBy:{date:'asc'}}); const doc=new PDFDocument({size:'A4', margin:40}); res.setHeader('Content-Type','application/pdf'); res.setHeader('Content-Disposition',`inline; filename="payroll-${code}-${month}.pdf"`); // @ts-ignore
doc.pipe(res); await drawLogo(doc,logo); header(doc,`Phiếu lương – ${month}`); doc.fontSize(10).font('Helvetica').text(`Mã NV: ${code}    Họ tên: ${emp.name}`,40,90); let y=120; tableHeader(doc,y); y+=10; for(const t of list){ y+=16; if(y>740){ doc.addPage(); y=40; header(doc,`Phiếu lương – ${month}`); y=90; tableHeader(doc,y); y+=10; } const hrs=hoursFrom(t.timeInMin,t.timeOutMin).toFixed(2); row(doc,y,toYMD(t.date),String(t.rawIn||''),String(t.rawOut||''),hrs); } y+=24; if(p){ doc.moveTo(40,y).lineTo(555,y).strokeColor('#e5e7eb').stroke(); y+=10; doc.font('Helvetica-Bold'); doc.text(`Giờ thường: ${p.regHours.toFixed(2)}    Giờ lễ: ${p.holHours.toFixed(2)}`,40,y); y+=14; doc.text(`Lương/giờ: ${p.hourly.toLocaleString('vi-VN')}    Hệ số lễ: ${p.holidayMult}`,40,y); y+=14; doc.font('Helvetica').text(`Ăn: ${p.meal.toLocaleString('vi-VN')}   Thưởng: ${p.bonus.toLocaleString('vi-VN')}   Trách nhiệm: ${p.responsibility.toLocaleString('vi-VN')}`,40,y); y+=14; doc.text(`Phạt: -${p.penalty.toLocaleString('vi-VN')}   Tạm ứng: -${p.advance.toLocaleString('vi-VN')}`,40,y); y+=14; doc.font('Helvetica-Bold').fontSize(12).text(`TỔNG: ${p.total.toLocaleString('vi-VN')} đ`,40,y); } else { doc.font('Helvetica-Oblique').text('Chưa tính payroll cho tháng này.',40,y); } doc.end(); });